generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  nickname               String?                  @unique @db.VarChar(255)
  email                  String?                  @unique @db.VarChar(255)
  password               String?                  @db.VarChar(255)
  first_name             String?                  @db.VarChar(255)
  last_name              String?                  @db.VarChar(255)
  phone                  String?                  @db.VarChar(255)
  isgoogle               Boolean
  createdAt              DateTime?                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime?                @default(now()) @db.Timestamptz(6)
  receivedMessages       Message[]                @relation("ReceivedMessages")
  sentMessages           Message[]                @relation("SentMessages")
  ReceivedMessagesToUser ReceivedMessagesToUser[]
  sentRooms              Room[]                   @relation("RoomSenderRelation")
  RoomToUser             RoomToUser[]
  SMTPs                  SMTP[]
  SentMessagesToUser     SentMessagesToUser[]
  tasks                  Task[]
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  completed   Boolean?  @default(false)
  description String?
  date        DateTime? @default(now()) @db.Timestamptz(6)
  user_id     Int
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model SMTP {
  id        Int      @id @default(autoincrement())
  email     String?  @db.VarChar(255)
  password  String?  @db.VarChar(255)
  vi        String?  @db.VarChar(255)
  provider  String?  @db.VarChar(255)
  user_id   Int?
  is_active Boolean? @default(false)
  user      User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_smtp_user")
}

model Room {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar(255)
  sender_id  Int?
  messages   Message[]    @relation("RoomMessages")
  sender     User?        @relation("RoomSenderRelation", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_room_sender")
  RoomToUser RoomToUser[]
}

model Message {
  id                     Int                      @id @default(autoincrement())
  message                String?                  @db.VarChar(255)
  sender_id              Int
  receiver_id            Int?
  room_id                Int?
  receiver               User?                    @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_message_receiver")
  room                   Room?                    @relation("RoomMessages", fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_message_room")
  sender                 User                     @relation("SentMessages", fields: [sender_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_message_sender")
  ReceivedMessagesToUser ReceivedMessagesToUser[]
  SentMessagesToUser     SentMessagesToUser[]
}

model ReceivedMessagesToUser {
  A       Int
  B       Int
  Message Message @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_received_message")
  User    User    @relation(fields: [B], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_received_user")

  @@id([A, B])
}

model RoomToUser {
  A    Int
  B    Int
  Room Room @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_room_to_user_room")
  User User @relation(fields: [B], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_room_to_user_user")

  @@id([A, B])
}

model SentMessagesToUser {
  A       Int
  B       Int
  Message Message @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sent_message")
  User    User    @relation(fields: [B], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sent_user")

  @@id([A, B])
}
