generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  nickname               String                   @unique @db.VarChar(255)
  email                  String                   @unique @db.VarChar(255)
  password               String?                  @db.VarChar(255)
  first_name             String                   @db.VarChar(255)
  last_name              String                   @db.VarChar(255)
  phone                  String                   @db.VarChar(255)
  isgoogle               Boolean
  createdAt              DateTime?                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime?                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  receivedMessages       Message[]                @relation("ReceivedMessages")
  sentMessages           Message[]                @relation("SentMessages")
  SMTP                   SMTP?
  tasks                  Task[]
  ReceivedMessagesToUser ReceivedMessagesToUser[]
  RoomToUser             RoomToUser[]
  SentMessagesToUser     SentMessagesToUser[]
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  completed   Boolean? @default(false)
  description String?
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SMTP {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  vi        String?  @db.VarChar(255)
  provider  String   @db.VarChar(255)
  user_id   Int      @unique
  is_active Boolean? @default(false)
  User      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Room {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  messages   Message[]
  RoomToUser RoomToUser[]
}

model Message {
  id                     Int                      @id @default(autoincrement())
  message                String                   @db.VarChar(255)
  sender_id              Int
  receiver_id            Int?
  room_id                Int?
  receiver               User?                    @relation("ReceivedMessages", fields: [receiver_id], references: [id], onUpdate: NoAction)
  room                   Room?                    @relation(fields: [room_id], references: [id], onUpdate: NoAction)
  sender                 User                     @relation("SentMessages", fields: [sender_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  ReceivedMessagesToUser ReceivedMessagesToUser[]
  SentMessagesToUser     SentMessagesToUser[]

  @@index([receiver_id])
  @@index([room_id])
  @@index([sender_id])
}

model ReceivedMessagesToUser {
  A       Int
  B       Int
  Message Message @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User    User    @relation(fields: [B], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([A, B])
  @@map("_ReceivedMessagesToUser")
}

model RoomToUser {
  A    Int
  B    Int
  Room Room @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User User @relation(fields: [B], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([A, B])
  @@map("_RoomToUser")
}

model SentMessagesToUser {
  A       Int
  B       Int
  Message Message @relation(fields: [A], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User    User    @relation(fields: [B], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([A, B])
  @@map("_SentMessagesToUser")
}
